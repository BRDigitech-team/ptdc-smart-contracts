{
    "language": "Solidity",
    "sources": {
        "presale.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface Aggregator {\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ncontract PayTheDebt_Sale is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20Metadata;\n\n    uint256 public presaleId;\n    uint256 public USDT_MULTIPLIER;\n    uint256 public ETH_MULTIPLIER;\n    address public ownerWallet;\n    address public treasuryWallet;\n\n    struct Presale {\n        uint256 startTime;\n        uint256 endTime;\n        uint256 price;\n        uint256 nextStagePrice;\n        uint256 Sold;\n        uint256 tokensToSell;\n        uint256 UsdtHardcap;\n        uint256 amountRaised;\n        bool Active;\n        bool isEnableClaim;\n    }\n\n    struct ClaimData {\n        uint256 claimAt;\n        uint256 totalAmount;\n        uint256 claimedAmount;\n    }\n\n    IERC20Metadata public USDTInterface;\n    Aggregator internal aggregatorInterface;\n    // https://docs.chain.link/docs/ethereum-addresses/ => (ETH / USD)\n\n    mapping(uint256 => bool) public paused;\n    mapping(uint256 => Presale) public presale;\n    mapping(address => mapping(uint256 => ClaimData)) public userClaimData;\n\n    IERC20Metadata public SaleToken;\n\n    event PresaleCreated(\n        uint256 indexed _id,\n        uint256 _totalTokens,\n        uint256 _startTime,\n        uint256 _endTime\n    );\n\n    event PresaleUpdated(\n        bytes32 indexed key,\n        uint256 prevValue,\n        uint256 newValue,\n        uint256 timestamp\n    );\n\n    event TokensBought(\n        address indexed user,\n        uint256 indexed id,\n        address indexed purchaseToken,\n        uint256 tokensBought,\n        uint256 amountPaid,\n        uint256 timestamp\n    );\n\n    event TokensClaimed(\n        address indexed user,\n        uint256 indexed id,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event PresaleTokenAddressUpdated(\n        address indexed prevValue,\n        address indexed newValue,\n        uint256 timestamp\n    );\n\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\n\n    constructor(\n        address _usdt,\n        address _treasuryWallet,\n        address _ownerWallet,\n        address _oracle\n    ) Ownable(msg.sender) {\n       \n        SaleToken = IERC20Metadata(0x9C905494D8e27470C0e547889C232A63225Fb880);\n        USDTInterface = IERC20Metadata(_usdt);\n        ETH_MULTIPLIER = (10**18);\n        USDT_MULTIPLIER =(10**6) ;\n        ownerWallet = _ownerWallet;\n        treasuryWallet = _treasuryWallet;\n        aggregatorInterface = Aggregator(_oracle);\n    }\n\n    // function ChangeTokenToSell(address _token) public onlyOwner {\n    //     SaleToken = _token;\n    // }\n\n    // /**\n    //  * @dev Creates a new presale\n    //  * @param _price Per token price multiplied by (10**18)\n    //  * @param _tokensToSell No of tokens to sell\n    //  */\n    function createPresale(uint256 _price,uint256 _nextStagePrice, uint256 _tokensToSell, uint256 _UsdtHardcap)\n        external\n        onlyOwner\n    {\n        require(_price > 0, \"Zero price\");\n        require(_tokensToSell > 0, \"Zero tokens to sell\");\n        require(presale[presaleId].Active == false, \"Previous Sale is Active\");\n\n        presaleId++;\n\n        presale[presaleId] = Presale(\n            0,\n            0,\n            _price,\n            _nextStagePrice,\n            0,\n            _tokensToSell,\n            _UsdtHardcap,\n            0,\n            false,\n            false\n        );\n\n        emit PresaleCreated(presaleId, _tokensToSell, 0, 0);\n    }\n\n    function startPresale() public onlyOwner {\n        presale[presaleId].startTime = block.timestamp;\n        presale[presaleId].Active = true;\n    }\n\n    function endPresale() public onlyOwner {\n        require(\n            presale[presaleId].Active = true,\n            \"This presale is already Inactive\"\n        );\n        presale[presaleId].endTime = block.timestamp;\n        presale[presaleId].Active = false;\n    }\n\n    // @dev enabel Claim amount\n    function enableClaim(uint256 _id, bool _status)\n        public\n        checkPresaleId(_id)\n        onlyOwner\n    {\n        presale[_id].isEnableClaim = _status;\n    }\n\n    // /**\n    //  * @dev Update a new presale\n    //  * @param _price Per USD price should be multiplied with token decimals\n    //  * @param _tokensToSell No of tokens to sell without denomination. If 1 million tokens to be sold then - 1_000_000 has to be passed\n    //  */\n    function updatePresale(\n        uint256 _id,\n        uint256 _price,\n        uint256 _nextStagePrice,\n        uint256 _tokensToSell,\n        uint256 _Hardcap\n    ) external checkPresaleId(_id) onlyOwner {\n        require(_price > 0, \"Zero price\");\n        require(_tokensToSell > 0, \"Zero tokens to sell\");\n        presale[_id].price = _price;\n        presale[_id].nextStagePrice = _nextStagePrice;\n        presale[_id].tokensToSell = _tokensToSell;\n        presale[_id].UsdtHardcap =_Hardcap;\n    }\n\n    /**\n     * @dev To update the fund receiving wallet\n     * @param _wallet address of wallet to update\n\n     */\n    function changeFundWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"Invalid parameters\");\n        treasuryWallet = _wallet;\n    }\n\n    function changeOwnerTokenWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"Invalid parameters\");\n        ownerWallet = _wallet;\n    }\n\n    /**\n     * @dev To update the USDT Token address\n     * @param _newAddress Sale token address\n     */\n    function changeUSDTToken(address _newAddress) external onlyOwner {\n        require(_newAddress != address(0), \"Zero token address\");\n        USDTInterface = IERC20Metadata(_newAddress);\n    }\n\n    /**\n     * @dev To pause the presale\n     * @param _id Presale id to update\n     */\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\n        require(!paused[_id], \"Already paused\");\n        paused[_id] = true;\n        emit PresalePaused(_id, block.timestamp);\n    }\n\n    /**\n     * @dev To unpause the presale\n     * @param _id Presale id to update\n     */\n    function unPausePresale(uint256 _id)\n        external\n        checkPresaleId(_id)\n        onlyOwner\n    {\n        require(paused[_id], \"Not paused\");\n        paused[_id] = false;\n        emit PresaleUnpaused(_id, block.timestamp);\n    }\n\n    /**\n     * @dev To get latest ethereum price in 10**18 format\n     */\n    function getLatestPrice() public view returns (uint256) {\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\n        price = (price * (10**10));\n        return uint256(price);\n    }\n\n    modifier checkPresaleId(uint256 _id) {\n        require(_id > 0 && _id <= presaleId, \"Invalid presale id\");\n        _;\n    }\n\n    modifier checkSaleState(uint256 _id, uint256 amount) {\n        require(\n            block.timestamp >= presale[_id].startTime &&\n                presale[_id].Active == true,\n            \"Invalid time for buying\"\n        );\n        require(\n            amount > 0 && amount <= presale[_id].tokensToSell-presale[_id].Sold,\n            \"Invalid sale amount\"\n        );\n        _;\n    }\n\n    /**\n     * @dev To buy into a presale using USDT\n     * @param usdAmount Usdt amount to buy tokens\n     */\n    function buyWithUSDT(uint256 usdAmount)\n        external\n        checkPresaleId(presaleId)\n        checkSaleState(presaleId, usdtToTokens(presaleId, usdAmount))\n        returns (bool)\n    {\n        require(!paused[presaleId], \"Presale paused\");\n        require(presale[presaleId].Active == true, \"Presale is not active yet\");\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,\n        \"Amount should be less than leftHardcap\");\n\n        uint8 decimals = SaleToken.decimals();\n        uint256 tokenPrice = presale[presaleId].price; // calculate token price in eth\n        uint256 tokens = (usdAmount * (10**uint256(decimals))) / tokenPrice;\n\n\n        presale[presaleId].Sold += tokens;\n        presale[presaleId].amountRaised += usdAmount;\n\n        USDTInterface.safeTransferFrom(msg.sender, treasuryWallet, usdAmount);\n        SaleToken.safeTransferFrom(ownerWallet, msg.sender, tokens);\n\n        emit TokensBought(\n            _msgSender(),\n            presaleId,\n            address(USDTInterface),\n            tokens,\n            usdAmount,\n            block.timestamp\n        );\n        return true;\n    }\n\n    /**\n     * @dev To buy into a presale using ETH\n     */\n    function buyWithETH()\n        external\n        payable\n        checkPresaleId(presaleId)\n        checkSaleState(presaleId, ethToTokens(presaleId, msg.value))\n        nonReentrant\n        returns (bool)\n    {\n        uint256 weiAmount = msg.value;\n\n        uint256 usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER);\n        require(presale[presaleId].amountRaised + usdAmount <= presale[presaleId].UsdtHardcap,\n        \"Amount should be less than leftHardcap\");\n\n        require(!paused[presaleId], \"Presale paused\");\n        require(presale[presaleId].Active == true, \"Presale is not active yet\");\n\n        // calculate token amount to be created\n        uint8 decimals = SaleToken.decimals();\n        uint256 tokenPrice = _getTokenPriceInEth(presale[presaleId].price); // calculate token price in eth\n        uint256 tokens = (weiAmount * (10**uint256(decimals))) / tokenPrice;\n\n        presale[presaleId].Sold += tokens;\n        presale[presaleId].amountRaised += usdAmount;\n\n        sendValue(payable(treasuryWallet), msg.value);\n        SaleToken.safeTransferFrom(ownerWallet, msg.sender, tokens);\n        emit TokensBought(\n            _msgSender(),\n            presaleId,\n            address(0),\n            tokens,\n            msg.value,\n            block.timestamp\n        );\n        return true;\n    }\n\n\n    /**\n     * @dev Helper funtion to get ETH price for given amount\n     * @param _id Presale id\n     * @param amount No of tokens to buy\n     */\n    function ethBuyHelper(uint256 _id, uint256 amount)\n        external\n        view\n        checkPresaleId(_id)\n        returns (uint256 ethAmount)\n    {\n        uint256 usdPrice = (amount * presale[_id].price);\n        ethAmount = (usdPrice * ETH_MULTIPLIER) / (getLatestPrice() * 10**IERC20Metadata(SaleToken).decimals());\n    }\n\n    /**\n     * @dev Helper funtion to get USDT price for given amount\n     * @param _id Presale id\n     * @param amount No of tokens to buy\n     */\n    function usdtBuyHelper(uint256 _id, uint256 amount)\n        external\n        view\n        checkPresaleId(_id)\n        returns (uint256 usdPrice)\n    {\n        usdPrice = (amount * presale[_id].price) / 10**IERC20Metadata(SaleToken).decimals();\n    }\n\n    /**\n     * @dev Helper funtion to get tokens for eth amount\n     * @param _id Presale id\n     * @param amount No of eth\n     */\n    function ethToTokens(uint256 _id, uint256 amount)\n        public\n        view\n        returns (uint256 _tokens)\n    {\n        uint256 usdAmount = amount * getLatestPrice() * USDT_MULTIPLIER / (ETH_MULTIPLIER * ETH_MULTIPLIER);\n        _tokens = usdtToTokens(_id, usdAmount);\n    }\n\n    /**\n     * @dev Helper funtion to get tokens for given usdt amount\n     * @param _id Presale id\n     * @param amount No of usdt\n     */\n    function usdtToTokens(uint256 _id, uint256 amount)\n        public\n        view\n        checkPresaleId(_id)\n        returns (uint256 _tokens)\n    {\n        _tokens = (amount * presale[_id].price) / USDT_MULTIPLIER;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Low balance\");\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"ETH Payment failed\");\n    }\n\n    function unlockToken(uint256 _id)\n        public\n        view\n        checkPresaleId(_id)\n        onlyOwner\n    {\n        require(\n            block.timestamp >= presale[_id].endTime,\n            \"You can only unlock on finalize\"\n        );\n    }\n\n    function _getTokenPriceInEth(uint256 _rate) internal view returns (uint256) {\n        uint256 ethPriceInUsd = uint256(getLatestPriceEth());\n        uint256 ethPriceinUSDT = ethPriceInUsd / 100;\n        uint256 tokenPriceInEth = _rate * (10 ** 18) / ethPriceinUSDT;\n        return tokenPriceInEth;\n    }\n\n    function getLatestPriceEth() public view returns (int) {\n        (\n            /*uint80 roundID*/,\n            int answer,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = aggregatorInterface.latestRoundData();\n        return answer;\n    }\n\n\n    \n}"
        },
        "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/interfaces/IERC1363.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "@openzeppelin/contracts/interfaces/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
        },
        "@openzeppelin/contracts/interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "": [
                    "ast"
                ],
                "*": [
                    "abi",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.legacyAssembly",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "evm.gasEstimates",
                    "evm.assembly"
                ]
            }
        },
        "remappings": []
    }
}